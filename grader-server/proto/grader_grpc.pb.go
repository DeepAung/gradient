// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/grader.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Grader_Grade_FullMethodName = "/main.Grader/Grade"
)

// GraderClient is the client API for Grader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraderClient interface {
	Grade(ctx context.Context, in *Input, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Status], error)
}

type graderClient struct {
	cc grpc.ClientConnInterface
}

func NewGraderClient(cc grpc.ClientConnInterface) GraderClient {
	return &graderClient{cc}
}

func (c *graderClient) Grade(ctx context.Context, in *Input, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Status], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Grader_ServiceDesc.Streams[0], Grader_Grade_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Input, Status]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grader_GradeClient = grpc.ServerStreamingClient[Status]

// GraderServer is the server API for Grader service.
// All implementations must embed UnimplementedGraderServer
// for forward compatibility.
type GraderServer interface {
	Grade(*Input, grpc.ServerStreamingServer[Status]) error
	mustEmbedUnimplementedGraderServer()
}

// UnimplementedGraderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGraderServer struct{}

func (UnimplementedGraderServer) Grade(*Input, grpc.ServerStreamingServer[Status]) error {
	return status.Errorf(codes.Unimplemented, "method Grade not implemented")
}
func (UnimplementedGraderServer) mustEmbedUnimplementedGraderServer() {}
func (UnimplementedGraderServer) testEmbeddedByValue()                {}

// UnsafeGraderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraderServer will
// result in compilation errors.
type UnsafeGraderServer interface {
	mustEmbedUnimplementedGraderServer()
}

func RegisterGraderServer(s grpc.ServiceRegistrar, srv GraderServer) {
	// If the following call pancis, it indicates UnimplementedGraderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Grader_ServiceDesc, srv)
}

func _Grader_Grade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraderServer).Grade(m, &grpc.GenericServerStream[Input, Status]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Grader_GradeServer = grpc.ServerStreamingServer[Status]

// Grader_ServiceDesc is the grpc.ServiceDesc for Grader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Grader",
	HandlerType: (*GraderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Grade",
			Handler:       _Grader_Grade_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/grader.proto",
}
